- [DONE] Implement Basic structure 
- [Done] Builder: Drag & Drop from elements to form itself
  -- DRAG DROP working almost super duper good
- [DONE] Fix DD so that form elements can be added to any part of the form
 -- [DONE] While dragging over form, there should be an indication of where form element will be put
- [DONE] Implement docker-compose based development environment including mysql
- [DONE] Implement basic mysql pooled connectivity + migrations system
- [DONE] Migration created to store form objects
- [DONE] Backend: Implement backend + database to handle form save events, simple express.js app
  Implement endpoint to list forms and form details
- [DONE] Builder: save form using backend
- [DONE] Setup pipelines CI/CD
- [DONE] Implement UnitTests for React components and run them on CI/CD pipelines
- [DONE] Backend: Implement form renderer to render form into html
    and host the form in a url :DOMAIN/form/:FORM_ID
    -- Rendered form should not have React, it should be lean
        so required fields, and other computation should be done with a lean + raw JS code
- [DONE] Impove backend renderer so that it should render into a proper form with proper POST target
- [DONE] Backend: Handle submissions
- [DONE] Add react-router and implement main menu, builder, forms, data 
- [DONE] Submissions: List received responses

VNTTD:

- Form List: List saved forms and allow user to click form for editing


MVP:
- Backend: Send responses to user email
- Frontend&Backend: Implement signup auth and make sure only owners can edit forms
- Use Renderer to allow users to change form and element properties on right hand side
- Builder: allow users to import forms into their websites using a JS file
- Setup k8s and deploy to production
- Form themes: Make sure at least 1 theme exists for forms
- Refactor api endpoints to look like RESTfull api

BackLog:
- Do not transpile react components for form render each time on production
- Templates: Implement template mechanism List templates and allow users to clone
- Styling: Get a designer to design everything and apply styling so it looks cool
- Add Multiple form Themes and allow quick switch between them
- Decide basic paid plans
- Implement a payment gateway (stripe) and accept paid subscriptions
- Implement functional tests (Using selenium, create a form and do a submission and verify it worked)
- Add more form items: textarea, dropdown
  Work on customizing form elements such as, label at top, required..
  Investigate if basic html5 form validation can be used to reduce JS in exported form
- Go Live and start experimenting with paid advertising
- Integrations: 
  -- Payment gateways so that people can sell stuff with forms
  -- Google drive, dropbox, so that responses can go automatically to other places
  -- Webhook integration, so that when responses received, it can be forwarded to customer urls
- API: a very nice to have, not very near
- Make everything opensource with a suitable license so that formPress can't be used
  commercially without a paid license
- Finally somewhere in between, quit my job and focus on this business solely :)
- Make sure the company is friendly to its workers, find ways to share financial success
  with employees so they can enjoy life and have financial security through creative hardwork!
  -- Do not hire toxic people and fire them if noticed. Treat people with respect. 
  Build a rock solid company culture where everybody enjoys life, do good work and learn new things
- Thats enough planning, now do some work
